name: Build and Test Docker Compose

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:14
        ports:
          - 5432:5432
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7.0.5-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
        ports:
          - 9200:9200
        env:
          discovery.type: single-node
        options: >-
          --health-cmd "curl -s http://localhost:9200/_cluster/health | grep -vq '\"status\":\"red\"'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Ensure pip, setuptools, and wheel are up to date
      run: |
        python -m pip install --upgrade pip setuptools wheel



    - name: Create .env file for GitHub Actions
      run: |
            touch backend/.env
            echo "DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }}" >> backend/.env
            echo "DJANGO_DEBUG=${{ secrets.DJANGO_DEBUG }}" >> backend/.env
            echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> backend/.env
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> backend/.env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> backend/.env
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> backend/.env
            echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> backend/.env
            echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> backend/.env

    - name: Build and push backend image
      uses: docker/build-push-action@v2
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: backend:latest

    - name: Build and push frontend image
      uses: docker/build-push-action@v2
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: frontend:latest

    - name: Build and push worker image
      uses: docker/build-push-action@v2
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: worker:latest

    - name: Copy .env file to backend
      run: |
        cp ./backend/.env.example ./backend/.env

    - name: Start Docker Compose
      run: |
        docker-compose -f docker-compose.yml up --build -d

    - name: Wait for services to be healthy
      run: |
        while ! docker-compose -f docker-compose.yml exec db pg_isready -U postgres; do sleep 5; done
        while ! docker-compose -f docker-compose.yml exec redis redis-cli ping; do sleep 5; done
        while ! docker-compose -f docker-compose.yml exec elasticsearch curl -s http://localhost:9200
